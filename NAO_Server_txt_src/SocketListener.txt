import socket

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        # Set l adresse IP et le port
        self.HOST="" # prend l adresse IP de la machine par défaut
        self.PORT=1234
        # New socket
        self.socketOrder = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socketOrder.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socketOrder.bind((self.HOST, self.PORT))
        self.socketOrder.listen(1)
        self.connectionOrder, self.HOST = self.socketOrder.accept()
        self.logger.info("Connexion possible :"+str(self.connectionOrder)+":"+str(self.PORT))

        # Get socket message : UID, order, params
        total_data=""
        while 1:
            data = self.connectionOrder.recv(1)
            if not data:
                break
            else:
                if data=='$':
                    p=total_data.strip(" \t\n\r").split("#")
                else:
                    if len(total_data)<255:  # limite du data buffer
                        total_data+=data

        self.onStopped(p) #activate the output of the box
        pass

    def onUnload(self):
        # Destructeur pour recommencer l'écoute
        self.socketOrder.close()
        self.connectionOrder.shutdown(socket.SHUT_WR)
        self.connectionOrder.close()
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box